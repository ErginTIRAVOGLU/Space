using System.Globalization;
using System.IO;
using System.Runtime.InteropServices;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Exporters;
using BenchmarkDotNet.Loggers;
using BenchmarkDotNet.Running;
using BenchmarkDotNet.Reports;

namespace Space.Benchmarks;

public static class Program
{
    public static void Main(string[] args)
    {
        var config = CreateConfig(out var outputDir);

        // Run all benchmarks and collect summaries
        var summaries = BenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args, config);

        // Write a simple meta.md with date and system info
        try
        {
            WriteMeta(outputDir, summaries);
            Console.WriteLine($"Benchmark reports written to: {outputDir}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to write meta report: {ex}");
        }
    }

    private static IConfig CreateConfig(out string outputDir)
    {
        // Project directory (e.g., tests/Space.Benchmarks)
        var projectDir = Path.GetFullPath(Path.Combine(AppContext.BaseDirectory, "..", "..", ".."));
        var dateStamp = DateTime.Now.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

        // Place results under Space.Benchmarks/BenchmarkResults/{date}
        outputDir = Path.Combine(projectDir, "BenchmarkResults", dateStamp);
        Directory.CreateDirectory(outputDir);

        // Start from minimum viable config to avoid DefaultConfig exporters (HTML/CSV)
        var cfg = ManualConfig.CreateMinimumViable()
            .WithArtifactsPath(outputDir)
            .WithCultureInfo(CultureInfo.InvariantCulture)
            .AddLogger(ConsoleLogger.Default)
            .AddExporter(MarkdownExporter.GitHub); // Only markdown

        return cfg;
    }

    private static void WriteMeta(string outputDir, IEnumerable<Summary> summaries)
    {
        var metaPath = Path.Combine(outputDir, "meta.md");
        using var sw = new StreamWriter(metaPath);

        var localNow = DateTime.Now.ToString("u");

        sw.WriteLine("# Benchmark Run");
        sw.WriteLine();
        sw.WriteLine($"- Date (Local UTC format): {localNow}");
        sw.WriteLine($"- Output Directory: {outputDir}");
        sw.WriteLine();

        // Host/System info (portable)
        sw.WriteLine("## System Info");
        sw.WriteLine($"- OS: {RuntimeInformation.OSDescription}");
        sw.WriteLine($"- OS Architecture: {RuntimeInformation.OSArchitecture}");
        sw.WriteLine($"- Process Architecture: {RuntimeInformation.ProcessArchitecture}");
        sw.WriteLine($"- .NET Runtime: {RuntimeInformation.FrameworkDescription}");
        sw.WriteLine($"- CPU Logical Cores: {Environment.ProcessorCount}");
        sw.WriteLine();

        sw.WriteLine("## Reports");
        sw.WriteLine("The files below have been generated by benchmark tests:");
        sw.WriteLine();

        foreach (var s in summaries)
        {
            var md = $"{s.Title}-report-github.md";

            sw.WriteLine($"- {md}");
        }

        sw.Flush();
    }
}
