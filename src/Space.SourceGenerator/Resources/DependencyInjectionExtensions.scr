// <auto-generated>
//     Generated by the Space source generator.
// </auto-generated>

using System;
using Space.Abstraction;
using Space.Abstraction.Context;
using Space.Abstraction.Registry;
using Space.Abstraction.Modules;
using Space.Abstraction.Registry.Dispatchers;
using Microsoft.Extensions.DependencyInjection;

namespace Space.DependencyInjection
{
    public static class SourceGeneratorDependencyInjectionExtensions
    {
        public static IServiceCollection AddSpaceSourceGenerated(this IServiceCollection services)
        {
            return AddSpaceInternal(services, new SpaceOptions());
        }

        public static IServiceCollection AddSpaceSourceGenerated(this IServiceCollection services, Action<SpaceOptions> options)
        {
            var SpaceOptions = new SpaceOptions();
            options?.Invoke(SpaceOptions);
            return AddSpaceInternal(services, SpaceOptions);
        }

        private static IServiceCollection AddSpaceInternal(IServiceCollection services, SpaceOptions options)
        {
            services.AddSingleton<ISpace, global::Space.DependencyInjection.Space>();
            services.AddSingleton<ModuleFactory>();

            if (options.NotificationDispatchType == NotificationDispatchType.Parallel)
                services.AddSingleton<INotificationDispatcher, ParallelNotificationDispatcher>();
            else
                services.AddSingleton<INotificationDispatcher, SequentialNotificationDispatcher>();

            {{ for handler in AllHandlersName }}
            services.Add(new ServiceDescriptor(typeof({{ handler }}), typeof({{ handler }}), options.ServiceLifetime));
            {{ end }}

            services.AddSingleton<SpaceRegistry>(sp =>
            {
                var registry = new SpaceRegistry(sp);

                // Notification Registry
                {{ for handler in Notifications }}
                registry.RegisterNotification<{{ handler.RequestParameterTypeName }}>((ctx) =>
                {
                    var handler = ctx.ServiceProvider.GetRequiredService<{{ handler.ClassFullName }}>();
                    return handler.{{ handler.MethodName }}(ctx);
                }, "{{ handler.HandlerName }}");
                {{ end }}

                // Handler Registry
                {{ for handler in Handlers }}
                
                    registry.RegisterHandler<{{ handler.RequestParameterTypeName }}, {{ handler.ReturnTypeName }}>(
                    handler: (ctx) =>
                    {
                        var handler = sp.GetRequiredService<{{ handler.ClassFullName }}>();
                        {{~ if handler.IsValueTask ~}}
                        return handler.{{ handler.MethodName }}(ctx);
                        {{~ else ~}}
                        return new ValueTask<{{ handler.ReturnTypeName }}>(handler.{{ handler.MethodName }}(ctx));
                        {{~ end ~}}
                    },
                    name: "{{ handler.HandlerName }}");

                    {{ for pipelineModel in handler.PipelineCompileModels }}
                        registry.RegisterPipeline<{{ handler.RequestParameterTypeName }}, {{ handler.ReturnTypeName }}>("{{ handler.HandlerName }}", 
                            new PipelineConfig()
                            {
                                {{ for property in pipelineModel.Properties }}
                                {{ property.Key }} = {{ property.Value }},
                                {{ end }}
                            },
                            (ctx, next) =>
                            {
                                var pipeline = sp.GetRequiredService<{{ pipelineModel.ClassFullName }}>();
                                {{~ if pipelineModel.IsValueTask ~}}
                                return pipeline.{{ pipelineModel.MethodName }}(ctx, next);
                                {{~ else ~}}
                                return new ValueTask<{{ handler.ReturnTypeName }}>(pipeline.{{ pipelineModel.MethodName }}(ctx, next));
                                {{~ end ~}}
                            });
                    {{ end }}

                    {{ for moduleModel in handler.ModuleCompileModels }}
                        registry.RegisterModule<{{ handler.RequestParameterTypeName }}, {{ handler.ReturnTypeName }}>("{{ moduleModel.ModuleName }}", "{{ handler.HandlerName }}");
                    {{ end }}

                {{ end }}

                registry.CompleteRegistration();
                return registry;
            });

            return services;
        }
    }
}