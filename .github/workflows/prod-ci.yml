name: Prod CI (Stable Publish)

on:
  release:
    types: [published]

concurrency:
  group: prod-ci
  cancel-in-progress: true

jobs:
  prod-ci:
    if: ${{ github.event.release.prerelease == false }}
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Set Release Version
        id: version
        shell: bash
        run: |
          set -euo pipefail
          RAW_TAG="${{ github.event.release.tag_name }}"
          if [[ -z "$RAW_TAG" ]]; then
            echo "Release tag name is empty" >&2
            exit 1
          fi
          # Normalize possible inputs (e.g., refs/tags/v1.0.0, v1.0.0, 1.0.0)
          TAG=$(echo -n "$RAW_TAG" | tr -d '[:space:]')
          TAG=${TAG#refs/tags/}
          TAG=${TAG#tags/}
          # Strip a single leading v or V
          if [[ "$TAG" =~ ^[vV]([0-9].*)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="$TAG"
          fi
          # Basic SemVer (allow pre-release/build metadata)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+([-.+].*)?$ ]]; then
            echo "Tag '$RAW_TAG' produced invalid version '$VERSION'. Expected '1.2.3' or 'v1.2.3' (pre-release/build allowed)." >&2
            exit 1
          fi
          echo "Using version: $VERSION from tag: $RAW_TAG"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build -c Release --no-restore -p:Version=${VERSION}

      - name: Test
        run: dotnet test tests/Space.Tests/Space.Tests.csproj -c Release --no-build --logger trx

      - name: Pack
        run: |
          PROJECTS=( \
            src/Space.Abstraction/Space.Abstraction.csproj \
            src/Space.DependencyInjection/Space.DependencyInjection.csproj \
          )
          mkdir -p artifacts
          for p in "${PROJECTS[@]}"; do
            echo "Packing $p -> ${VERSION}";
            dotnet pack "$p" -c Release --no-build -p:PackageVersion=${VERSION} -p:Version=${VERSION} -o artifacts
          done

      - name: Publish Stable Packages (NuGet)
        if: success()
        run: dotnet nuget push "./artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Publish Outputs
        run: |
          mkdir -p drop
          PROJECTS=( \
            src/Space.Abstraction/Space.Abstraction.csproj \
            src/Space.DependencyInjection/Space.DependencyInjection.csproj \
          )
          for proj in "${PROJECTS[@]}"; do
            NAME=$(basename "${proj%.*}")
            dotnet publish "$proj" -c Release -o "drop/${NAME}" -p:Version=${VERSION}
          done
          cp artifacts/*.nupkg drop/

      - name: Upload Drop Artifact
        uses: actions/upload-artifact@v4
        with:
          name: prod-drop
          path: drop

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prod-test-results
          path: '**/*.trx'
